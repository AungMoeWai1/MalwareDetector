using Newtonsoft.Json;
using System;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Forms;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using MS.WindowsAPICodePack.Internal;
using System.ComponentModel;


namespace MalwareDetection
{
    public partial class MainWindow : Window
    {
        

        public MainWindow()
        {
            //default work flow
            InitializeComponent();

            

            // Show the Dash Borad Page in the right side of the app
            InitializeDashboard();
           
        }

        //for Menu of left side to show the form of usercontrols
        private void MenuButton_Click(object sender, RoutedEventArgs e)
        {
            var button = sender as System.Windows.Controls.Button;
            if (button != null)
            {
                // Clear existing content
                MainContentArea.Children.Clear();

                // Add new content based on the clicked button
                string tag = button.Tag.ToString();

                switch (tag)
                {
                    case "Dashboard":
                        MainContentArea.Children.Add(new Dashboard());
                        break;
                    case "Scan":
                        MainContentArea.Children.Add(new Scan());
                        break;
                    case "Quarantine":
                        MainContentArea.Children.Add(new Quarantine());
                        break;
                    case "HistoryList":
                        MainContentArea.Children.Add(new LogFile());
                        break;
                    case "Settings":
                        MainContentArea.Children.Add(new Setting());
                        break;
                    case "AboutUs":
                        MainContentArea.Children.Add(new AboutUs());
                        break;
                    // Add other cases for different sections

                    default:
                        break;
                }
            }
        }

        // Show the Dashboard and check the virus file definition on the server to notify the user
        private async void InitializeDashboard()
        {
            try
            {
                System.Windows.Controls.UserControl newPage = new Dashboard();
                MainContentArea.Children.Add(newPage);

                // for checking the version of the definition
                if (CheckNetwork.IsInternetAvailable())
                {
                    CheckVirusDefinitionUpdate checker = new CheckVirusDefinitionUpdate();
                    try
                    {
                        string result = await checker.CheckVirusDefinition();
                        if (result != "Up to date")
                        {
                            CustomNotification notification = new CustomNotification("MalwareDetector", result);
                            notification.Show();
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle any exceptions
                        ShowCustomNotification("MalwareDetector", $"An error occurred while checking virus definition: {ex.Message}");
                    }
                }
                else
                {
                    ShowCustomNotification("MalwareDetector","No Network is Avaliable Now...");
                }
                
            }
            catch (Exception ex)
            {
                // Handle any exceptions
                ShowCustomNotification("MalwareDetector", $"An error occurred while initializing the dashboard: {ex.Message}");
                
            }
        }

        public void ShowCustomNotification(string title, string message)
        {
            // Execute on the UI thread
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                // Create and show the notification window
                CustomNotification notification = new CustomNotification(title, message);
                notification.Show();
            });
        }


    }
}
