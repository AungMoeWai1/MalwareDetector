using Newtonsoft.Json;
using System;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;
using System.Windows;

namespace MalwareDetection
{
    public class CheckVirusDefinitionUpdate
    {
        public string VirusDefinitionVersion { get; private set; }
        public static string VirusDefinitionVersionFromServer { get; private set; }
        public static string allData { get; private set; }

        public async Task<string> CheckVirusDefinition()
        {
            try
            {
                // Read virus definition from file
                ReadFromFile("MalwareDefination.json");

                // Check for update from server
                await CheckDefinitionUpdatefromServer();
                

                // Compare versions and determine if update is available
                if (!string.IsNullOrEmpty(VirusDefinitionVersion) && !string.IsNullOrEmpty(VirusDefinitionVersionFromServer) && VirusDefinitionVersion != VirusDefinitionVersionFromServer)
                {
                    return "Update available";
                }
                else
                {
                    return "Up to date";
                }
            }
            catch (Exception ex)
            {
                // Handle exceptions
                return "Error occurred: " + ex.Message;
            }
        }

        public void ReadFromFile(string filePath)
        {
            string currentDirectory = Directory.GetCurrentDirectory();
            string newFilePath = Path.Combine(currentDirectory, filePath);

            try
            {
               
                if (!File.Exists(newFilePath))
                {
                   
                }
                // Read the JSON file
                string jsonString = File.ReadAllText(newFilePath);

                // Deserialize the JSON into MalwareData object
                VirusData malwareData = JsonConvert.DeserializeObject<VirusData>(jsonString);

                // Access the version property
                //MessageBox.Show(malwareData.Version);
                VirusDefinitionVersion = malwareData.Version;

                //HERE IS THE ERROR TO SOLVE , IT IS RETURNING NULL VALUE.........
                /*List<Virus> viruslist = malwareData.Viruses;

                if (viruslist != null)
                {
                    foreach (Virus v in viruslist)
                    {
                        // Create a new MalwareSignature instance using the virus data and add it to the hashset
                        malwaresignatures.Add(new MalwareSignature(v.Hash, v.Type));
                    }
                }*/
            }
            catch (Exception)
            {
            }
        }
        private static async Task CheckDefinitionUpdatefromServer()
        {
            // Check if the network is available
            if (CheckNetwork.IsInternetAvailable())
            {
                //to be operate if the path is still miss
                try
                {
                    // Fetch data from API
                    await FetchDataFromApi(@"http://www.xspace.somee.com/MalwareDefination.json");
                }
                catch (Exception) { }
            }
        }

        private static async Task FetchDataFromApi(string apiUrl)
        {
            using (HttpClient client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    string data = await response.Content.ReadAsStringAsync();

                    VirusData virusDefinition = JsonConvert.DeserializeObject<VirusData>(data);

                    // Access version and virus information
                    VirusDefinitionVersionFromServer = virusDefinition.Version;
                    allData = data;
                }
            }
        }
    }
}
