using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;

namespace MalwareDetection
{
    
    public partial class LogFile : UserControl
    {
        private ObservableCollection<ScanResult> _scanResults = new ObservableCollection<ScanResult>();
        public event PropertyChangedEventHandler PropertyChanged;
        public ObservableCollection<ScanResult> ScanResults
        {
            get { return _scanResults; }
            set
            {
                _scanResults = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(ScanResults)));
            }
        }

        public LogFile()
        {
            InitializeComponent();
            readData();
        }
        private void readData()
        {
            ResultListBox.ItemsSource = null;
            ScanResults.Clear();

            string jsonFilePath = "historyLog.json";
            try
            {
                string jsonData = File.ReadAllText(jsonFilePath);

                // Deserialize JSON to list of objects
                List<LogEntry> dataList = JsonConvert.DeserializeObject<List<LogEntry>>(jsonData);

                // Output the filtered data
                foreach (var data in dataList)
                {
                    string time = data.Time.ToString();
                    DateTimeOffset dateTimeOffset = DateTimeOffset.Parse(time);
                    string formattedString = dateTimeOffset.ToString("yyyy-MM-dd HH:mm:ss");
                    ScanResults.Add(new ScanResult { FilePath = data.filepath, Type = data.Type, Status = "Infected", Action = data.Action, dateTime = formattedString });
                }
                ResultListBox.ItemsSource = ScanResults;
            }catch(Exception)
            {

            }
        }
        private void deleteHistoryButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string jsonFilePath = "HistoryLog.json";
                // Write an empty JSON array to the file
                File.WriteAllText(jsonFilePath, "[]");

                readData();
            }catch(Exception) { }
        }
    }
}
