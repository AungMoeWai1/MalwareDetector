using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.WindowsAPICodePack.Dialogs;
using System.Windows.Controls;
using Newtonsoft.Json;
using static System.Net.WebRequestMethods;
using static MalwareDetection.Quarantine;
using Microsoft.Win32;
using System.Diagnostics;
using System.Threading;

namespace MalwareDetection
{
    /// <summary>
    /// Interaction logic for Scan.xaml
    /// </summary>
    public partial class Scan : UserControl, INotifyPropertyChanged
    {
        MalwareLibrary malwarelibrary;
        private string scanDirectory = ""; // Change this to the directory you want to scan

        private List<LogEntry> logEntriesForHistory = new List<LogEntry>();
        private List<LogEntry> logEntries = new List<LogEntry>();
        private List<LogEntry> logEntriesforQuarantine = new List<LogEntry>();

        public event PropertyChangedEventHandler PropertyChanged;

        bool fullscan = false;
        int virusCount = 0;

        private bool continueScanning = true;

        public Scan()
        {
            virusCount = 0;
            InitializeComponent();
            malwarelibrary = new MalwareLibrary();
            readDataFromHistory();
        }
        private void readDataFromHistory()
        {
            string jsonFilePath = "historyLog.json";
            try
            {
                //if data exit show the data in the list view,
                string jsonData = System.IO.File.ReadAllText(jsonFilePath);
                // Deserialize JSON to list of objects
                List<LogEntry> dataList = JsonConvert.DeserializeObject<List<LogEntry>>(jsonData);

                // Output the filtered data
                foreach (var data in dataList)
                {
                    logEntriesForHistory.Add(new LogEntry { filepath = data.filepath, originalExtension = data.originalExtension, changedFilePath = data.changedFilePath, Type = data.Type, Action = data.Action, Time = data.Time });
                }
            }
            catch (Exception)
            {
                //No data to show you
            }
        }

        private void ScanButton_Click(object sender, RoutedEventArgs e)
        {
            // Show the ComboBox when the button is clicked
            scanOptionsComboBox.Visibility = Visibility.Visible;
            progressNumber.Text = "0%";
            ProgressBar.Value = 0;
        }
        private void stopActionButton_Click(object sender, RoutedEventArgs e)
        {
            // Set the flag to stop scanning
            continueScanning = false;

            ProgressBar.Value = 0.0;
            progressNumber.Text = "";
            stopActionButton.Visibility = Visibility.Hidden;
            
        }

        private async void ScanOptionsComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            continueScanning = true;

            if (scanOptionsComboBox.SelectedItem != null)
            {
                // Get the selected index from the ComboBox
                int selectedIndex = scanOptionsComboBox.SelectedIndex;
                stopActionButton.Visibility = Visibility.Visible;
                progressNumber.Visibility = Visibility.Visible;
                ProgressBar.Visibility = Visibility.Visible;
                // Perform action based on the selected index
                switch (selectedIndex)
                {
                    case 0:
                        // Perform file scan
                        var dialog1 = new OpenFileDialog
                        {
                            Title = "Select Files",
                            Multiselect = true
                        };

                        bool? result = dialog1.ShowDialog();
                        if (result == true)
                        {
                            string[] selectedFiles = dialog1.FileNames;
                            // Do something with the selected file paths
                            ScanFileAsync(selectedFiles);
                        }
                        break;
                    case 1:

                        // Perform folder scan
                        var dialog2 = new CommonOpenFileDialog
                        {
                            IsFolderPicker = true,
                            Title = "Select a Folder"
                        };

                        CommonFileDialogResult result2 = dialog2.ShowDialog();

                        if (result2 == CommonFileDialogResult.Ok)
                        {
                            string selectedFolder = dialog2.FileName;
                            await ScanDirAsync(selectedFolder);
                        }

                        break;
                    case 2:
                        // Perform full scan
                        // Start scanning all drives
                        await ScanAllDrivesAsync();
                        break;
                    default:
                        break;
                }
                // Reset the ComboBox selection after processing
                scanOptionsComboBox.SelectedIndex = -1;
                scanOptionsComboBox.Visibility = Visibility.Collapsed;
                scanOptionsComboBox.Visibility = Visibility.Hidden;
                stopActionButton.Visibility = Visibility.Hidden;
                ProgressBar.Visibility = Visibility.Hidden;
                progressNumber.Visibility = Visibility.Hidden;

            }
        }




        //For Custom File Scan
        private async Task ScanFileAsync(string[] files)
        {
            stopActionButton.Visibility = Visibility.Visible;
            try
            {   //Here to add the line for remove the file value of the logEntriesForHistory of Allowed action Path
                // Iterate over each file in the files array
                foreach (string file in files)
                {
                    // Check if the text contains "Quarantine" 
                    if (file.Contains("Quarantine")==false)
                    {
                        //If Some file are allowed!, This path don't contain Quarantine
                        // Check if the file path is present in logEntriesForHistory
                        if (logEntriesForHistory.Any(entry => (entry.filepath == file && entry.Action == "Allow")))
                        {
                            // If the file path is found and the action is allowed, remove it from the files array
                            files = files.Where(f => f != file).ToArray();
                        }
                    }
                    else
                    {
                        //File path conatin the under the directory of Quarantine , Remove that file from list
                        files = files.Where(f => f != file).ToArray();
                    }
                }

                int totalFiles = files.Length;
                for (int i = 0; i < totalFiles; i++)
                {
                    if (!continueScanning)
                    {
                        break;
                    }
                    double progress = (i + 1) * 100.0 / totalFiles;
                    ProgressBar.Value = progress;
                    progressNumber.Text = $"{progress:F2}%";
                    scanFilePath.Text = files[i].ToString();

                    await Task.Delay(100);

                    string filePath = files[i];
                    string virusType = malwarelibrary.IsFileMalware(filePath);
                    if (virusType != "false")
                    {
                        //ScanResults.Add(new ScanResult { FilePath = filePath, Type = virusType, Status = "Infected" });
                        MoveAndChangeFileType(filePath, virusType);
                        virusCount++;
                    }
                }

                CustomNotification notification = new CustomNotification("MalwareDetector", virusCount+" Numbers of virus found!");
                notification.Show();
                virusCount = 0;

            }
            catch (Exception ex)
            {
                CustomNotification notification = new CustomNotification("MalwareDetector",$"Error: {ex.Message}");
                notification.Show();  
            }
            progressNumber.Text = "Done";
            scanFilePath.Text = "";
            
        }

        private async Task<List<string>> GetAllFilesAsync(string directory)
        {
            List<string> allFiles = new List<string>();

            try
            {

                // Get files in the current directory, including hidden files
                string[] files = Directory.GetFiles(directory, "*", SearchOption.TopDirectoryOnly)
                                          .Where(f => (System.IO.File.GetAttributes(f) & FileAttributes.Hidden) != FileAttributes.Hidden)
                                          .ToArray();
                allFiles.AddRange(files);

                // Get files in subdirectories recursively, including hidden files
                string[] subDirectories = Directory.GetDirectories(directory, "*", SearchOption.TopDirectoryOnly)
                                                   .Where(d => (System.IO.File.GetAttributes(d) & FileAttributes.Hidden) != FileAttributes.Hidden)
                                                   .ToArray();
                foreach (string subDir in subDirectories)
                {
                    string directoryName = Path.GetFileName(subDir);
                    if (directoryName == "Quarantine") { }
                    else
                    {
                        List<string> subDirFiles = await GetAllFilesAsync(subDir);
                        allFiles.AddRange(subDirFiles);
                    }
                }
            }
            catch (UnauthorizedAccessException)
            {
                // Handle unauthorized access (e.g., log the error, notify the user, etc.)
                // You can choose to continue or skip processing this directory depending on your requirements
            }

            return allFiles;
        }


        //For Custom Folder Scan
        private async Task ScanDirAsync(string scanDirectory)
        {
            stopActionButton.Visibility = Visibility.Visible;
            try
            {
                List<string> files = await GetAllFilesAsync(scanDirectory);

                //Here to add the line for remove the file value of the logEntriesForHistory of Allowed action Path
                // Iterate over each file in the files array
                foreach (string file in files)
                {
                    // Check if the text contains "Quarantine" 
                    if (file.Contains("Quarantine") == false)
                    {
                        //If Some file are allowed!, This path don't contain Quarantine
                        // Check if the file path is present in logEntriesForHistory
                        if (logEntriesForHistory.Any(entry => (entry.filepath == file && entry.Action == "Allow")))
                        {
                            // If the file path is found and the action is allowed, remove it from the files array
                            files = files.Where(f => f != file).ToList();
                        }
                    }
                    else
                    {
                        //File path conatin the under the directory of Quarantine , Remove that file from list
                        files = files.Where(f => f != file).ToList();
                    }
                }
                int totalFiles = files.Count;
                for (int i = 0; i < totalFiles; i++)
                {
                    if (!continueScanning)
                    {
                        break;
                    }
                    double progress = (i + 1) * 100.0 / totalFiles;
                    ProgressBar.Value = progress;
                    progressNumber.Text = $"{progress:F2}%";
                    scanFilePath.Text = files[i].ToString();

                    await Task.Delay(100);

                    string filePath = files[i];
                    string virusType = malwarelibrary.IsFileMalware(filePath);
                    if (virusType != "false")
                    {
                        //ScanResults.Add(new ScanResult { FilePath = filePath, Type = virusType, Status = "Infected" });
                        MoveAndChangeFileType(filePath, virusType);
                        virusCount++;
                    }
                }
                CustomNotification notification = new CustomNotification("MalwareDetector", virusCount + " Numbers of virus found!");
                notification.Show();
                virusCount = 0;

            }
            catch (Exception ex)
            {
                CustomNotification notification = new CustomNotification("MalwareDetector", $"Error: {ex.Message}");
                notification.Show();
            }
            progressNumber.Text = "Done";
            scanFilePath.Text = "";
        }

        

        //For Full Scan of the whole Pc
        private async Task ScanAllDrivesAsync()
        {
            stopActionButton.Visibility = Visibility.Visible;
            List<string> theWholeFiles = new List<string>();

            // Get all drives on the system
            foreach (DriveInfo drive in DriveInfo.GetDrives())
            {
                // Check if the drive is fixed or removable
                if (drive.DriveType == DriveType.Fixed || drive.DriveType == DriveType.Removable)
                {
                    List<string> files=await GetAllFilesAsync(drive.RootDirectory.FullName);
                    theWholeFiles.AddRange(files);
                }
            }
            if (theWholeFiles != null)
            {
                await ScanFileAsyncfromDrive(theWholeFiles);
            }

            // Update progress bar and text
            ProgressBar.Value = 100;
            progressNumber.Text = "Scan completed.";
            scanFilePath.Text = "";
        }

        private async Task ScanFileAsyncfromDrive(List<string> files)
        {
            stopActionButton.Visibility = Visibility.Visible;
            try
            {   //Here to add the line for remove the file value of the logEntriesForHistory of Allowed action Path
                // Iterate over each file in the files array
                foreach (string file in files)
                {
                    // Check if the text contains "Quarantine" 
                    if (file.Contains("Quarantine") == false)
                    {
                        //If Some file are allowed!, This path don't contain Quarantine
                        // Check if the file path is present in logEntriesForHistory
                        if (logEntriesForHistory.Any(entry => (entry.filepath == file && entry.Action == "Allow")))
                        {
                            // If the file path is found and the action is allowed, remove it from the files array
                            files = files.Where(f => f != file).ToList();
                        }
                    }
                    else
                    {
                        //File path conatin the under the directory of Quarantine , Remove that file from list
                        files = files.Where(f => f != file).ToList();
                    }
                }

                int totalFiles = files.Count;
                for (int i = 0; i < totalFiles; i++)
                {
                    if (!continueScanning)
                    {
                        break;
                    }
                    double progress = (i + 1) * 100.0 / totalFiles;
                    ProgressBar.Value = progress;
                    progressNumber.Text = $"{progress:F2}%";
                    scanFilePath.Text = files[i].ToString();

                    await Task.Delay(100);

                    string filePath = files[i];
                    string virusType = malwarelibrary.IsFileMalware(filePath);
                    if (virusType != "false")
                    {
                        //ScanResults.Add(new ScanResult { FilePath = filePath, Type = virusType, Status = "Infected" });
                        MoveAndChangeFileType(filePath, virusType);
                        virusCount++;
                    }
                }

                CustomNotification notification = new CustomNotification("MalwareDetector", virusCount + " Numbers of virus found!");
                notification.Show();
                virusCount = 0;

            }
            catch (Exception ex)
            {
                CustomNotification notification = new CustomNotification("MalwareDetector", $"Error: {ex.Message}");
                notification.Show();
            }
            progressNumber.Text = "Done";
            scanFilePath.Text = "";

        }

        /// <summary>
        /// For Quarantine to work file to move safe folder and change file type to txt and save record
        /// </summary>
        private void MoveAndChangeFileType(string filePath, string typeOfVirus)
        {
            try
            {
                string fileName = Path.GetFileName(filePath);
                string currentDirectory = Directory.GetCurrentDirectory();

                // Check if the folder "Quarantine" exists
                string quarantineFolderPath = Path.Combine(currentDirectory, "Quarantine");
                if (!Directory.Exists(quarantineFolderPath))
                {
                    // If the "Quarantine" folder doesn't exist, create it
                    Directory.CreateDirectory(quarantineFolderPath);
                }

                // Move the file under the "Quarantine" folder
                string newFilePath = Path.Combine(quarantineFolderPath, fileName);
                System.IO.File.Move(filePath, newFilePath);

                // Change the file extension to ".txt"
                string txtFilePath = Path.ChangeExtension(newFilePath, ".txt");
                System.IO.File.Move(newFilePath, txtFilePath);
                logEntriesforQuarantine.Add(new LogEntry
                {
                    filepath = filePath,
                    changedFilePath = txtFilePath,
                    originalExtension = Path.GetExtension(filePath),
                    Type = typeOfVirus,
                    Action = "Quarantine",
                    Time = DateTime.Now.ToString()
                });
                logEntries.Add(new LogEntry
                {
                    filepath = filePath,
                    changedFilePath = txtFilePath,
                    originalExtension = Path.GetExtension(filePath),
                    Type = typeOfVirus,
                    Action = "Quarantine",
                    Time = DateTime.Now.ToString()
                });

                ///Write file to History and Quarantine.
                //for checking the current directory is in Quarantine folder
                //if it is Quarantine folder go back to parent folder & set it to currentDirectory
                //else get it as current directory
                string currentDirectory1 =Directory.GetCurrentDirectory();
                string quarantineFolderPath1 = Path.Combine(currentDirectory1, "Quarantine");

                if (string.Equals(currentDirectory1, quarantineFolderPath1, StringComparison.OrdinalIgnoreCase))
                {
                    // Get the parent directory
                    DirectoryInfo parentDirectory1 = Directory.GetParent(quarantineFolderPath1);
                    // Check if there is a parent directory
                    if (parentDirectory1 != null)
                    {
                        // Get the full path of the parent directory
                        string parentPath1 = parentDirectory1.FullName;

                        // Set the current directory to the parent directory
                        Directory.SetCurrentDirectory(parentPath1);
                    }
                }

                //Write the log file in the History and Quarantine file
                createFile("HistoryLog.json", logEntries);
                createFile("QuarantineLog.json", logEntriesforQuarantine);

                //clear the listview
                logEntries.Clear();
                logEntriesforQuarantine.Clear();
            }
            catch (Exception)
            {
                System.IO.File.Delete(filePath);
            }
        }

        //file is exit or not check and append text to it
        private void createFile(string fileName, List<LogEntry> logEntries1)
        {
            string currentDirectory = Directory.GetCurrentDirectory();

            string newFilePath = Path.Combine(currentDirectory, fileName);
            if (System.IO.File.Exists(newFilePath))
            {
                // File exists, append logEntries to existing file
                string existingJson = System.IO.File.ReadAllText(newFilePath);
                List<LogEntry> existingLogEntries = JsonConvert.DeserializeObject<List<LogEntry>>(existingJson);
                existingLogEntries.AddRange(logEntries1);
                string updatedJson = JsonConvert.SerializeObject(existingLogEntries, Formatting.Indented);
                System.IO.File.WriteAllText(newFilePath, updatedJson);
            }
            else
            {
                // File doesn't exist, create new file and write logEntries to it
                string json = JsonConvert.SerializeObject(logEntries1, Formatting.Indented);
                System.IO.File.WriteAllText(newFilePath, json);
            }
        }
    }
}
