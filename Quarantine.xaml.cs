using Newtonsoft.Json;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Windows;
using System.Windows.Controls;

namespace MalwareDetection
{
    /// <summary>
    /// Interaction logic for Quarantine.xaml
    /// </summary>
    public partial class Quarantine : UserControl
    {

        private ObservableCollection<ScanResult> _scanResults = new ObservableCollection<ScanResult>();
        public event PropertyChangedEventHandler PropertyChanged;

        //for history data to store
        private List<LogEntry> logEntriesForHistory = new List<LogEntry>();

        //for handle data to move file to the original location with the original extension
        private List<LogEntry> dataToChange = new List<LogEntry>();

        private ObservableCollection<ScanResult> ScanResults
        {
            get { return _scanResults; }
            set
            {
                _scanResults = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(ScanResults)));
            }
        }
        public Quarantine()
        {
            InitializeComponent();
            //ResultListBox.ItemsSource = ScanResults;
            readDataFromHistory();
            readData();
        }

        //This is just for Update the History data by getting the data firstly
        private void readDataFromHistory()
        {
            string jsonFilePath = "historyLog.json";
            try
            {
                //if data exit show the data in the list view,
                string jsonData = File.ReadAllText(jsonFilePath);
                // Deserialize JSON to list of objects
                List<LogEntry> dataList = JsonConvert.DeserializeObject<List<LogEntry>>(jsonData);

                // Output the filtered data
                foreach (var data in dataList)
                {
                    logEntriesForHistory.Add(new LogEntry { filepath = data.filepath, originalExtension = data.originalExtension, changedFilePath = data.changedFilePath, Type = data.Type, Action = data.Action, Time = data.Time });
                }
            }
            catch (Exception)
            {
                //No data to show you
            }
        }
        private void readData()
        {
            string jsonFilePath = "QuarantineLog.json";
            try
            {
                //if data exit show the data in the list view,
                string jsonData = File.ReadAllText(jsonFilePath);
                // Deserialize JSON to list of objects
                List<LogEntry> dataList = JsonConvert.DeserializeObject<List<LogEntry>>(jsonData);

                // Filter the list based on the condition
                List<LogEntry> quarantineData = dataList.FindAll(data => data.Action == "Quarantine");
                // Output the filtered data
                foreach (var data in quarantineData)
                {
                    dataToChange.Add(new LogEntry { filepath = data.filepath, originalExtension = data.originalExtension, changedFilePath = data.changedFilePath, Type = data.Type, Action = data.Action, Time = data.Time });
                    ScanResults.Add(new ScanResult { FilePath = data.filepath, Type = data.Type, Status = "Infected", Action = data.Action,dateTime=data.Time});
                }
                if (ScanResults != null)
                {
                    startActionButton.Visibility = Visibility.Visible;
                }
                ResultListBox.ItemsSource = ScanResults;
            }catch(Exception)
            {
               //No data to show you
            }   
        }

        private void StartActionButton_Click(object sender, RoutedEventArgs e)
        {
            string currentDirectory = Directory.GetCurrentDirectory();
            string quarantineFolderPath = Path.Combine(currentDirectory, "Quarantine\\");
            foreach (ScanResult item in ScanResults)
            {
                switch (item.Action)
                {
                    case "Allow":
                        if (MessageBox.Show($"Are you sure to Allow file path of {item.FilePath}?", "Confirmation", MessageBoxButton.OKCancel) == MessageBoxResult.OK)
                        {
                            string fileNameforAllow = Path.GetFileNameWithoutExtension(item.FilePath);
                            string filePathforAllow = quarantineFolderPath + fileNameforAllow + ".txt";
                            //MessageBox.Show(fileName);
                            MoveAndChangeFileTypeToOriginalSpace(filePathforAllow);
                        }
                        break;
                    case "Quarantine":
                        //It is default state ,don't need to change!!!
                        break;
                    case "Remove":
                        string fileNameforDelete = Path.GetFileNameWithoutExtension(item.FilePath);
                        string filePathforDelete = quarantineFolderPath+ fileNameforDelete + ".txt";
                        try
                        {
                            // Check if the file exists before attempting to delete it
                            if (File.Exists(filePathforDelete))
                            {
                                // Attempt to delete the file
                                File.Delete(filePathforDelete);
                                dataToChange.RemoveAll(logEntries1 => logEntries1.filepath == item.FilePath);

                                //Change at logentry for history update data to Removed
                                logEntriesForHistory.ForEach(logEntries1 =>
                                {
                                    if (logEntries1.filepath == item.FilePath)
                                    {
                                        logEntries1.Action = "Remove";
                                        logEntries1.Time = DateTime.Now.ToString();
                                        logEntries1.changedFilePath = "";
                                        logEntries1.originalExtension = "";
                                    }
                                });
                            }
                            else
                            {
                                MessageBox.Show("File does not exist.");
                            }
                        }
                        catch (IOException ex)
                        {
                            // Handle any exceptions that may occur during file deletion
                            CustomNotification notification = new CustomNotification("File Deletion Error", "An error occurred: " + ex.Message);
                            notification.Show();
                        }
                        break;
                }
            }
            
            if (string.Equals(currentDirectory, quarantineFolderPath, StringComparison.OrdinalIgnoreCase))
            {
                // Get the parent directory
                DirectoryInfo parentDirectory = Directory.GetParent(quarantineFolderPath);
                // Check if there is a parent directory
                if (parentDirectory != null)
                {
                    // Get the full path of the parent directory
                    string parentPath = parentDirectory.FullName;

                    // Set the current directory to the parent directory
                    Directory.SetCurrentDirectory(parentPath);
                    MessageBox.Show(parentPath);
                }
            }

            createFileWithoutOverride("HistoryLog.json", logEntriesForHistory);
            createFileWithoutOverride("QuarantineLog.json", dataToChange);

            //clear the listview
            logEntriesForHistory.Clear();
            dataToChange.Clear();
            ScanResults.Clear();

            ResultListBox.ItemsSource = null;
            startActionButton.Visibility = Visibility.Hidden;
            readData();
            readDataFromHistory();
        }

        private void MoveAndChangeFileTypeToOriginalSpace(string filePath)
        {
            string originalextension = GetOriginalExtension(filePath);
            try
            {
                // Check if the file exists before attempting to delete it
                if (File.Exists(filePath))
                {
                    string newFilePath=dataToChange.LastOrDefault(entry => entry.changedFilePath == filePath).filepath;
                    //move to the original space
                    File.Move(filePath, newFilePath);

                    // Change the file extension to it original
                    string originalFilePath = Path.ChangeExtension(newFilePath,originalextension);
                    File.Move(newFilePath, originalFilePath);

                    logEntriesForHistory.ForEach(logEntries1 =>
                    {
                        if (logEntries1.filepath == originalFilePath)
                        {
                            logEntries1.Action = "Allow";
                            logEntries1.Time = DateTime.Now.ToString();
                            logEntries1.changedFilePath = "";
                            logEntries1.originalExtension = "";
                        }
                    });
                    dataToChange.RemoveAll(logentry => logentry.changedFilePath == filePath);
                }
                else
                {
                    MessageBox.Show("File does not exist.");
                }
            }
            catch (IOException ex)
            {
                // Handle any exceptions that may occur during file deletion
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }


        //file is exit or not check and append text to it
        private void createFileWithoutOverride(string fileName,List<LogEntry> logEntry1)
        {
            // Generate the JSON string from the list of log entries
            string json = JsonConvert.SerializeObject(logEntry1, Formatting.Indented);

            // Combine the file name with the directory where you want to save the file
            string newFilePath = Path.Combine(Environment.CurrentDirectory, fileName);

            // Write the JSON string to the file
            File.WriteAllText(newFilePath, json);
        }

        private string GetOriginalExtension(string filePath)
        {
            LogEntry logEntry = dataToChange.LastOrDefault(entry => entry.changedFilePath == filePath);
            if (logEntry != null)
            {
                return logEntry.originalExtension;
            }
            else
            {
                return null; // Or handle the case where the file path is not found in the list
            }
        }


    }
}
