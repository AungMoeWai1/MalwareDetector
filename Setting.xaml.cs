using Newtonsoft.Json;
using System.IO;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;

namespace MalwareDetection
{
    public partial class Setting : UserControl
    {
        //for the file listening
        //For store data of log
        private List<LogEntry> logEntriesForHistory = new List<LogEntry>();
        private List<LogEntry> logEntries = new List<LogEntry>();
        private List<LogEntry> logEntriesforQuarantine = new List<LogEntry>();

        private List<FileSystemWatcher> watchers = new List<FileSystemWatcher>();

        MalwareLibrary library;
        bool toggleValue =false;
        string result = "";
        public Setting()
        {
            InitializeComponent();
            virusAppVersion.Text= GetCurrentVersion();
            toggleValue=SystemInformation.readFile("setting.json");
            MalwareProtectionToggleSwitch.IsChecked = toggleValue;

            library = new MalwareLibrary();
            virusVersion.Text = library.virusDefinationVersion;
        }
        public void ShowCustomNotification(string title, string message)
        {
            // Execute on the UI thread
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                // Create and show the notification window
                CustomNotification notification = new CustomNotification(title, message);
                notification.Show();
            });
        }

        private void checkForUpdateApplicationButton_Click(object sender, RoutedEventArgs e)
        {
            // Code to handle when the install button is clicked
            // For example, trigger the installation process
            ShowCustomNotification("MalwareDetector", "No Update is Availiable");
        }
        //Done of Application's Events

        //Protection for Malware's events
        private void MalwareProtectionToggleSwitch_Checked(object sender, RoutedEventArgs e)
        {
            // Code to handle when notify toggle switch is checked
            MalwareProtectionText.Text = "ON";
            toggleValue = true;
            MalwareProtectionToggleSwitch.IsChecked = toggleValue;
            SystemInformation.createFileWithOverride("setting.json", "ON");
            InitializeFileSystemWatcher();
        }

        private void MalwareProtectionToggleSwitch_Unchecked(object sender, RoutedEventArgs e)
        {
            // Code to handle when notify toggle switch is unchecked
            MalwareProtectionText.Text = "OFF";
            toggleValue = false;
            MalwareProtectionToggleSwitch.IsChecked = toggleValue;
            SystemInformation.createFileWithOverride("setting.json", "OFF");
            StopFileMonitoring();
        }

        private async void checkForUpdateDefinationButton_Click(object sender, RoutedEventArgs e)
        {
            // Code to handle when the install button is clicked
            // For example, trigger the installation process
            ///for checking the version of the defination
            CheckVirusDefinitionUpdate checker = new CheckVirusDefinitionUpdate();

            try
            {
                result = await checker.CheckVirusDefinition();
                virusDefinationVersionText.Text = result;
                virusDefinationVersionText.Visibility = Visibility.Visible;
                if (result== "Update available")
                {
                    downloadForUpdateDefinationButton.Visibility = Visibility.Visible;
                }
            }
            catch (Exception) { }
            
        }
        //for download the virus defination
        private void UpdateDefinationButton_Click(object sender, RoutedEventArgs e)
        {
            // Code to handle when the install button is clicked
            // For example, trigger the installation process
            string data=CheckVirusDefinitionUpdate.allData;
            //write downloaded data of virus defination into malwareDefination.json file
            SystemInformation.createFileWithOverride("MalwareDefination.json", data);

            library = new MalwareLibrary();
            virusVersion.Text = library.virusDefinationVersion;

            //Hide the download button & Text 
            downloadForUpdateDefinationButton.Visibility = Visibility.Hidden;
            virusDefinationVersionText.Visibility = Visibility.Hidden;

        }

        //The Current App of the version
        public string GetCurrentVersion()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            AssemblyFileVersionAttribute attribute = assembly.GetCustomAttributes(typeof(AssemblyFileVersionAttribute), false)
                                                          .FirstOrDefault() as AssemblyFileVersionAttribute;
            if (attribute != null)
            {
                return attribute.Version;
            }
            else
            {
                return "Version information not found.";
            }
        }

        // To stop file Watcher Listening...
        private void StopFileMonitoring()
        {
            foreach (var watcher in watchers)
            {
                // Unsubscribe from event handlers
                watcher.Changed -= FileSystemWatcher_Changed;
                watcher.Created -= FileSystemWatcher_Created;
                watcher.Renamed -= FileSystemWatcher_Renamed;

                watcher.EnableRaisingEvents = false;
                watcher.Dispose();
            }
            watchers.Clear();
        }

        // Listening the file what user are doing...
        private void InitializeFileSystemWatcher()
        {
            // Get all drives on the system
            foreach (DriveInfo drive in DriveInfo.GetDrives())
            {
                if (drive.IsReady && drive.DriveType == DriveType.Fixed)
                {
                    // Create a FileSystemWatcher for each drive
                    FileSystemWatcher watcher = new FileSystemWatcher();
                    watcher.Path = drive.RootDirectory.FullName;

                    // Set up event handlers
                    watcher.Created += FileSystemWatcher_Created;
                    watcher.Changed += FileSystemWatcher_Changed;
                    watcher.Renamed += FileSystemWatcher_Renamed;

                    // Set other properties as needed
                    watcher.IncludeSubdirectories = true;

                    // Enable raising events
                    watcher.EnableRaisingEvents = true;

                    // Add the watcher to the list
                    watchers.Add(watcher);
                }
            }
        }

        // Event handlers and other methods remain the same as before


        // Event handlers
        private void FileSystemWatcher_Created(object sender, FileSystemEventArgs e)
        {
            string filePath = e.FullPath;
            ScanFileAsync(filePath);
        }

        private void FileSystemWatcher_Changed(object sender, FileSystemEventArgs e)
        {
            string filePath = e.FullPath;
            ScanFileAsync(filePath);

        }

        private void FileSystemWatcher_Renamed(object sender, RenamedEventArgs e)
        {
            string oldFilePath = e.OldFullPath;
            string newFilePath = e.FullPath;
            ScanFileAsync(oldFilePath);

        }

        //for Scan to each file
        //For Custom File Scan
        private Task ScanFileAsync(string file)
        {
            try
            {
                // Check if the text contains "Quarantine"
                if (file.Contains("Quarantine"))
                {
                    return Task.CompletedTask;
                }
                //Here to add the line for remove the file value of the logEntriesForHistory of Allowed action Path
                else if (logEntriesForHistory.Any(entry => (entry.filepath == file && entry.Action == "Allow") || (entry.filepath == file && entry.Action == "Quarantine")))
                {
                    return Task.CompletedTask;
                }

                else
                {
                    string virusType = library.IsFileMalware(file);
                    if (virusType != "false")
                    {
                        MoveAndChangeFileType(file, virusType);
                        ShowCustomNotification("MalwareDetector", "Malware Found!");
                    }
                }

            }
            catch (Exception)
            {
                //MessageBox.Show($"Error: {ex.Message}", "Scan Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return Task.CompletedTask;
        }


        //To move under the Quarantine folder if the scanned file is malware.
        private void MoveAndChangeFileType(string filePath, string typeOfVirus)
        {
            try
            {
                string fileName = Path.GetFileName(filePath);
                string currentDirectory = Directory.GetCurrentDirectory();

                // Check if the folder "Quarantine" exists
                string quarantineFolderPath = Path.Combine(currentDirectory, "Quarantine");
                if (!Directory.Exists(quarantineFolderPath))
                {
                    // If the "Quarantine" folder doesn't exist, create it
                    Directory.CreateDirectory(quarantineFolderPath);
                }

                // Move the file under the "Quarantine" folder
                string newFilePath = Path.Combine(quarantineFolderPath, fileName);
                System.IO.File.Move(filePath, newFilePath);

                // Change the file extension to ".txt"
                string txtFilePath = Path.ChangeExtension(newFilePath, ".txt");
                System.IO.File.Move(newFilePath, txtFilePath);
                logEntriesforQuarantine.Add(new LogEntry
                {
                    filepath = filePath,
                    changedFilePath = txtFilePath,
                    originalExtension = Path.GetExtension(filePath),
                    Type = typeOfVirus,
                    Action = "Quarantine",
                    Time = DateTime.Now.ToString()
                });
                logEntries.Add(new LogEntry
                {
                    filepath = filePath,
                    changedFilePath = txtFilePath,
                    originalExtension = Path.GetExtension(filePath),
                    Type = typeOfVirus,
                    Action = "Quarantine",
                    Time = DateTime.Now.ToString()
                });

                //for checking the current directory is in Quarantine folder
                //if it is Quarantine folder go back to parent folder & set it to currentDirectory
                //else get it as current directory
                string currentDirectory1 = Directory.GetCurrentDirectory();
                string quarantineFolderPath1 = Path.Combine(currentDirectory1, "Quarantine");

                if (string.Equals(currentDirectory1, quarantineFolderPath1, StringComparison.OrdinalIgnoreCase))
                {
                    // Get the parent directory
                    DirectoryInfo parentDirectory = Directory.GetParent(quarantineFolderPath);
                    // Check if there is a parent directory
                    if (parentDirectory != null)
                    {
                        // Get the full path of the parent directory
                        string parentPath = parentDirectory.FullName;

                        // Set the current directory to the parent directory
                        Directory.SetCurrentDirectory(parentPath);
                    }
                }

                //Write the log file in the History and Quarantine file
                createFile("HistoryLog.json", logEntries);
                createFile("QuarantineLog.json", logEntriesforQuarantine);

                ShowCustomNotification("Malware Detection Alert", "Malware is detected at " + filePath);

                //clear the listview
                logEntries.Clear();
                logEntriesforQuarantine.Clear();

            }
            catch (Exception)
            {
                System.IO.File.Delete(filePath);
            }
        }

        //To Write file
        private void createFile(string fileName, List<LogEntry> logEntries1)
        {
            string currentDirectory = Directory.GetCurrentDirectory();

            string newFilePath = Path.Combine(currentDirectory, fileName);
            if (System.IO.File.Exists(newFilePath))
            {
                // File exists, append logEntries to existing file
                string existingJson = System.IO.File.ReadAllText(newFilePath);
                List<LogEntry> existingLogEntries = JsonConvert.DeserializeObject<List<LogEntry>>(existingJson);
                existingLogEntries.AddRange(logEntries1);
                string updatedJson = JsonConvert.SerializeObject(existingLogEntries, Formatting.Indented);
                System.IO.File.WriteAllText(newFilePath, updatedJson);
            }
            else
            {
                // File doesn't exist, create new file and write logEntries to it
                string json = JsonConvert.SerializeObject(logEntries1, Formatting.Indented);
                System.IO.File.WriteAllText(newFilePath, json);
            }
        }






    }
}
