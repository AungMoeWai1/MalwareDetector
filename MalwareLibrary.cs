using System;
using System.IO;
using System.Security.Cryptography;
using System.Text.Json;
using System.Windows;
using Newtonsoft.Json;

namespace MalwareDetection
{
    public class MalwareLibrary
    {
        private static readonly HashSet<MalwareSignature> malwaresignatures = new HashSet<MalwareSignature> { };
        public string virusDefinationVersion = "";

        public MalwareLibrary()
        {
            WriteDefinationFile("MalwareDefination.json");
            ReadFromFile("MalwareDefination.json");
        }
        

        public string IsFileMalware(string filePath)
        {
            // Perform signature-based detection
            string signatureResult = CheckSignature(filePath);
            //MessageBox.Show(signatureResult);

            if (signatureResult != "false")
            {
                return signatureResult;
            }
            // If neither signature nor behavior indicate malware
            return "false";
        }

        private string CheckSignature(string filePath)
        {
            try
            {
                using (var md5 = MD5.Create())
                {
                    using (var stream = File.OpenRead(filePath))
                    {
                        byte[] hashBytes = md5.ComputeHash(stream);
                        string hash = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                        foreach (MalwareSignature signature in malwaresignatures)
                        {
                            if (signature.Hash.Equals(hash))
                            {
                                return signature.VirusType;
                            }
                        }
                        return "false";
                    }
                }
            }
            catch (Exception)
            {
                return "false"; // Error occurred while reading the file
            }
        }

        /// <summary>
        /// Read Data from Json file
        /// </summary>
        public void ReadFromFile(string filePath)
        {
            try
            {
                if (!File.Exists(filePath))
                {
                    MessageBox.Show($"File '{filePath}' does not exist.");
                }
                // Read the JSON file
                string jsonString = File.ReadAllText(filePath);

                // Deserialize the JSON into MalwareData object
                VirusData malwareData = JsonConvert.DeserializeObject<VirusData>(jsonString);

                // Access the version property
                //MessageBox.Show(malwareData.Version);
                virusDefinationVersion = malwareData.Version;


                //HERE IS THE ERROR TO SOLVE , IT IS RETURNING NULL VALUE.........
                List<Virus> viruslist = malwareData.Viruses;

                if(viruslist!=null)
                {
                    foreach (Virus v in viruslist)
                    {
                        // Create a new MalwareSignature instance using the virus data and add it to the hashset
                        malwaresignatures.Add(new MalwareSignature(v.Hash, v.Type));
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        ///Write Data to Json File
        private void WriteDefinationFile(string fileName)
        {
            if (!File.Exists(fileName))
            {
                VirusData data = new VirusData
                {
                    Version = "1.0",
                    Viruses = new List<Virus>
                {
                    new Virus { Hash = "abcdef1234567890", Type = "Ransomware" },
                    new Virus { Hash = "098765fedcba4321", Type = "Spyware" },
                    new Virus { Hash = "e5c5353ee279ac3f22b230ce6e28dc4b", Type = "Trojan" },
                    new Virus { Hash = "44d88612fea8a8f36de82e1278abb02f", Type = "Ei_car_test" }
                }
                };
                // Convert the VirusData instance to JSON
                string json = JsonConvert.SerializeObject(data, Formatting.Indented);

                // Write the JSON to a file
                File.WriteAllText(fileName, json);
            }
        }
    }
}
