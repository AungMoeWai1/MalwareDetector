using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net;
using System.Windows;
using System.Net.NetworkInformation;

namespace MalwareDetection
{
    public class MalwareUpdater
    {
        private static readonly string FilePath = "MalwareDefination.json";
        private string apiVersionUrl = "url/to/your/api/version";
        private static readonly HashSet<MalwareSignature> MalwareSignatures = new HashSet<MalwareSignature>();

        public MalwareUpdater()
        {
            if(IsWifiAvailable() || IsInternetAvailable())
            {
                try
                {
                    // Read JSON data from the file
                    string jsonData = File.ReadAllText(FilePath);

                    // Deserialize JSON data into a dynamic object
                    dynamic jsonObject = JsonSerializer.Deserialize<dynamic>(jsonData);

                    // Accessing version from JSON
                    string localVersion = jsonObject["version"];

                    // Accessing virus array from JSON
                    var viruses = jsonObject["virus"];

                    String apiVersion = GetApiVersion();

                    //check new version is release
                    if (string.Compare(apiVersion, localVersion) > 0)
                    {
                        DownloadUpdatedFile();
                        MessageBox.Show("Local file updated successfully.");
                    }
                    else
                    {
                        MessageBox.Show("No update needed. Local version is up to date.");
                    }
                }
                catch (FileNotFoundException)
                {
                    MessageBox.Show("File not found.");
                }
                catch (IOException e)
                {
                    MessageBox.Show($"An error occurred while reading or updating the file: {e.Message}");
                }
                catch (JsonException e)
                {
                    MessageBox.Show($"An error occurred while parsing the JSON data: {e.Message}");
                }
            }
            else
            {
                MessageBox.Show("No internet connection");
            }
           
        }


        // get form api the version of json file
        private string GetApiVersion()
        {
            try
            {
                using (WebClient client = new WebClient())
                {
                    string json = client.DownloadString(apiVersionUrl);
                    var data = JsonSerializer.Deserialize<dynamic>(json);
                    return data["version"];
                }
            }
            catch (WebException)
            {
                MessageBox.Show("Failed to fetch version from API.");
            }
            catch (JsonException)
            {
                MessageBox.Show("Error parsing JSON data from API.");
            }

            return "";
        }

        //Download file from api
        private void DownloadUpdatedFile()
        {
            try
            {
                using (WebClient client = new WebClient())
                {
                    client.DownloadFile(apiVersionUrl, FilePath);
                }
            }
            catch (WebException)
            {
                MessageBox.Show("Failed to download updated file from API.");
            }
            catch (IOException e)
            {
                MessageBox.Show($"An error occurred while writing to the local file: {e.Message}");
            }
        }

        static bool IsWifiAvailable()
        {
            foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
            {
                if (networkInterface.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 && networkInterface.OperationalStatus == OperationalStatus.Up)
                {
                    return true;
                }
            }
            return false;
        }

        static bool IsInternetAvailable()
        {
            try
            {
                using (var client = new System.Net.WebClient())
                using (var stream = client.OpenRead("http://clients3.google.com/generate_204"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

    }
}
